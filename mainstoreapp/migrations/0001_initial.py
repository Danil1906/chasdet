# Generated by Django 3.2.9 on 2022-12-18 14:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mainstoreapp.models
import mptt.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Название категории')),
                ('photo', mainstoreapp.models.WEBPField(blank=True, default='default.webp', upload_to=mainstoreapp.models.image_folder_category)),
                ('slug', models.SlugField(verbose_name='url')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='mainstoreapp.category', verbose_name='Связи/ Категория/ Подкатегория')),
            ],
            options={
                'verbose_name': 'Категория(ю)',
                'verbose_name_plural': 'Категории',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_time', models.TextField(blank=True, verbose_name='График работы')),
                ('phone', models.CharField(max_length=250, unique=True, verbose_name='Номер телефона для представления на сайте')),
                ('phone_code', models.BigIntegerField(help_text='Указывается без пробелов и спецсимволов. Подставляется в код для поддержки интерактивности', unique=True, verbose_name='Номер телефона для кода')),
                ('email', models.CharField(max_length=250, unique=True, verbose_name='Почта')),
                ('email_feedback', models.EmailField(max_length=250, verbose_name='Почта для формы обратной связи')),
                ('address', models.CharField(max_length=250, unique=True, verbose_name='Адресс')),
            ],
            options={
                'verbose_name': 'Контактная информация',
                'verbose_name_plural': 'Контактная информация',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_num', models.IntegerField(default=0, verbose_name='Номер заказа')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('type_delivery', models.CharField(choices=[('CDEK', 'СДЭК'), ('POCHTA', 'Почта РФ')], default='POCHTA', max_length=25, verbose_name='тип доставки')),
                ('status_order', models.CharField(choices=[('MANUAL', 'Сообщение с оповещением отправлено о заказе'), ('INVOICE', 'Сообщение с реквизитами отправлено'), ('PAYMENT', 'Сообщение с оповещением об оплате отправлено'), ('TRACK', 'Сообщение с треком отправлены'), ('CLOSE', 'Заказ закрыт'), ('CANCEL', 'Заказ отменен')], default='MANUAL', max_length=50, verbose_name='статус заказа')),
                ('address', models.CharField(default='none', max_length=250, verbose_name='адрес')),
                ('email', models.EmailField(default='none', max_length=250, verbose_name='электронная почта')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, null=True, region=None, verbose_name='номер телефона')),
                ('cart', models.TextField(default='none', max_length=250, verbose_name='заказ')),
                ('discount', models.IntegerField(default=0, verbose_name='скидка')),
                ('total_sum', models.IntegerField(default=0, verbose_name='общая сумма')),
                ('track_number', models.CharField(default='none', max_length=100, verbose_name='трек номер посылки')),
                ('send', models.BooleanField(default=False, help_text='Укажи трек номер, поставь галку "отправить" \n        и нажми "сохранить". Тогда автоматически сообщение будет отправлено пользователю на номер телефона и почту с указанием трек номера.', verbose_name='отправить сообщение с реквизитами')),
                ('send_first', models.BooleanField(default=False, help_text='Отправит сообщение с данными для перевода.', verbose_name='отправить сообщение с подтверждением оплаты')),
                ('send_second', models.BooleanField(default=False, help_text='Отправит сообщение с подтверждением оплаты.', verbose_name='отправить сообщение с данными доставки')),
                ('close', models.BooleanField(default=False, help_text='Отметить галку и нажми "сохранить" \n    и тогда заказ будет закрыт а товары которые в нем числятся уйдут обратно в продажу.', verbose_name='отменить заказ')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='OrderText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_info', models.TextField(default='&', help_text='Первое сообщение которое будет выслано пользователю сразу после\n    оформления им заказа. В этом поле нужно будет указать место установки номера заказа, этот номер будет подставляться автоматически. Достаточно \n    указать символ & в месте, где нужно указать номер заказа', verbose_name='Первое сообщение после оформления заказа')),
                ('details', models.TextField(default='$', help_text='Указание реквизитов для оплаты. В этом поле нужно будет указать место для подстановки \n    суммы заказа, она встанет автоматически, достаточно только указать место для подставноки символом $', verbose_name='Сообщение к реквизитами для оплаты')),
                ('paid_for', models.TextField(default='& - $', help_text='Что то вроде "заказ оплачен, ожидает отправки. Нужно указать место подстановки номера заказа \n    и суммы заказа с помощью символов & и $ соответственно"', verbose_name='Подтверждение оплаченого заказа')),
                ('sent_by', models.TextField(default='%', help_text='Сообщение об отправке с трек номером. Для указания трек номера в каком\n      либо месте сообщшения достаточно указать @, а для указания службы доставки указать знак % .\n      Например "Товар отправле службой % . Трек номер отправления @""', verbose_name='Последнее сообщение с данными отправки')),
                ('title', models.CharField(default='none', max_length=100, verbose_name='Тема письма которая указывается при отправке письма покупателю')),
                ('email', models.EmailField(default='none', max_length=50, verbose_name='Почта на которую будет приходить уведомление о заказах')),
            ],
            options={
                'verbose_name': 'Инструкция для покупателя',
                'verbose_name_plural': 'Инструкция для покупателя',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sdek_delivery_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Доставка "сдек"')),
                ('poshta_delivery_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Доставка "почта"')),
                ('min_sum_for_wholesale', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Минимальная цена для оптовика')),
            ],
            options={
                'verbose_name': 'Цена (Доставка и Мин. сумма для оптовика)',
                'verbose_name_plural': 'Цены (Доставка и Мин. сумма для оптовика)',
            },
        ),
        migrations.CreateModel(
            name='PrivacyPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(default=' ', verbose_name='Политика')),
            ],
            options={
                'verbose_name': 'Политики конфиденциальности',
                'verbose_name_plural': 'Политики конфиденциальности',
            },
        ),
        migrations.CreateModel(
            name='Promocode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('promo', models.CharField(max_length=50, unique=True, verbose_name='Промокод')),
                ('type_of_promo', models.CharField(choices=[('DISCOUNT', 'Скидка'), ('BUYER_TYPE', 'Выдача статуса оптового покупателя')], default='DISCOUNT', max_length=25, verbose_name='тип промокода')),
                ('discount', models.IntegerField(blank=True, default=0, help_text='Поле для промокода \n    скидок, обязательно только для промокодов дающие скидку на корзину. Значение которое будет установлено это процент,\n     который скинется пользувателю в общей суммы.', null=True, verbose_name='Скидка в %')),
            ],
            options={
                'verbose_name': 'Промокод',
                'verbose_name_plural': 'Промокоды/ов',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=250, verbose_name='Вопрос')),
                ('answer', models.TextField(verbose_name='Ответ')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='SliderBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(default='#', help_text='Ссылка которая при клике будет куда то уводить пользователя', max_length=250, verbose_name='Ссылка')),
                ('is_published', models.BooleanField(default=False, help_text='добавить/снять с публикации в слайдере. В случае слайдера, опубликовано может быть сразу несколько записей.\n                                       В случае фиксированного поста, публиковаться будет только 1, даже если отметка "Опубликовано" стоит на нескольких.', verbose_name='Опубликовано')),
                ('photo', mainstoreapp.models.WEBPField(blank=True, help_text='Для большого слайдера размер 966*400 (цвет фона страницы #f3efef) \n    . Для маленького банера размер 272*400. Для лучшего отображения в слайдере следует собирать картинки указанных рамзмеров.', upload_to=mainstoreapp.models.image_folder_slider)),
                ('type_post', models.CharField(choices=[('SLIDER', 'Разместить в слайдере'), ('FIXED_POST', 'Разместить в фиксированном посте (можно только 1)')], default='SLIDER', max_length=25, verbose_name='Где расположить объявление')),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеров/ы',
            },
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vk', models.CharField(default='#', max_length=240, unique=True, verbose_name='ссылка на вконтакте')),
                ('odnoklassniki', models.CharField(default='#', max_length=240, unique=True, verbose_name='ссылка на одноклассники')),
            ],
            options={
                'verbose_name': 'Социалки',
                'verbose_name_plural': 'Социалки',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(blank=True, max_length=250, verbose_name='Ф.И.О.')),
                ('wholesale', models.BooleanField(default=False, verbose_name='Оптовик')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, null=True, region=None, verbose_name='номер телефона')),
                ('email', models.EmailField(blank=True, max_length=250, verbose_name='электронная почта')),
                ('cdek_address', models.CharField(blank=True, max_length=250, verbose_name='Адрес пункта выдачи сдек')),
                ('pochta_address', models.CharField(blank=True, max_length=250, verbose_name='Адрес для доставки на Почту России')),
                ('email_verify', models.BooleanField(default=False, verbose_name='Подтверждение почты')),
                ('purchased', models.JSONField(blank=True, default=dict, verbose_name='Купленные товары')),
                ('total_sum', models.IntegerField(default=0, verbose_name='Общая сумма заказов за все время')),
                ('total_orders', models.IntegerField(default=0, verbose_name='Общее количество заказов')),
                ('last_date_order', models.DateTimeField(default=None, null=True, verbose_name='Дата последнего заказа')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Наименование')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='url')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('photo', mainstoreapp.models.WEBPField(blank=True, default='default_prod_black.webp', upload_to=mainstoreapp.models.image_folder_product)),
                ('quantity', models.IntegerField(default=1, verbose_name='Количество')),
                ('is_published', models.BooleanField(default=True, verbose_name='Опубликовано?')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('wholesale_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена для оптовика')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, help_text='Поле для отображения старой цена. Для заполнения не обязательно. В случае если\n        цена на товар снижена, указать сюда старую цена а поле "Цена" указать новую, в таком случае на сайте старый \n        ценник будет перечеркнут. В случае если цена наоборот повысилась, это поле затрагивать не нужно.\n        ВАЖНО! Цена которую заплатит клиент указывается в поле "Цена", не перепутать!', max_digits=10, null=True, verbose_name='Старая цена (для акций или распродаж)')),
                ('glass', models.BooleanField(default=False, help_text='Этот флаг создан для товаров "стекла". Его активация\n    делает отображение товаров на страничке не сеткой а списком.', verbose_name='Стекло')),
                ('available', models.BooleanField(default=True, help_text='Это поле варьируется автоматически,\n    если остаток больше 0 то оно активно, в случае если равно 0, доступность снимается. Поле нужно для \n    правильной фильтрафии товаров', verbose_name='Доступен')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Добавлен')),
                ('uploaded', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('special_offer', models.BooleanField(default=False, help_text='\n    При активации данного поля товар дополнительно попадает в список " спецпредложений ", которые отображются в бургере,\n     из основной категории он не пропадает конечно же.', verbose_name='Спецпрелдожение')),
                ('review', models.JSONField(default=dict, verbose_name='Отзывы на товар')),
                ('rate', models.IntegerField(default=0, verbose_name='Суммарный рейтинг')),
                ('notify_list', models.JSONField(default=dict, help_text='Тут заносятся email пользователей, которых нужно уведомить о поступлении товара. Это просходит автоматически.', verbose_name='Список уведомлений')),
                ('category', mptt.fields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='mainstoreapp.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['title'],
                'index_together': {('id', 'slug')},
            },
        ),
    ]
